---
title: "World Happiness Report (WHR) Data Preparation"
author: "Group 14"
date: "`r Sys.Date()`"
output:
  html:
    toc: true
    toc_depth: 2
    number_sections: true
    theme: readable
    code-fold: true
    code-overflow: wrap
execute: 
  warning: false
---

## Loading of required packages

```{r}
pacman::p_load(tidyverse, janitor, slider)
```

## Importing of data

To combine all the different years of data in their respective csv files, there is a need to do a column mapping due to the different naming conventions used in the different years. The year was also populated using the file name which contains the year the data was obtained.

The following function was created to obtain the different naming convention of column headers across all the years.

```{r}
folder <- "data_files/yearly_data/"

get_column_headers_by_file <- function(folder_path) {
  file_list <- list.files(path = folder_path, pattern = "*.csv", full.names = TRUE)
  
  header_list <- map_dfr(file_list, function(file) {
    col_names <- names(read_csv(file, n_max = 0))
    cleaned_names <- janitor::make_clean_names(col_names)
    tibble(
      file = basename(file),
      column = cleaned_names
    )
  })
  
  return(header_list)
}

headers_df <- get_column_headers_by_file(folder)
```

The following code chunk was used to standardize the column headers naming convention and populate the year the data was collected.

```{r}
# Column mapping
column_mapping <- list(
  country = c("country_name", "country", "country_or_region"),
  ladder_score = c("ladder_score", "happiness_score", "score"),
  economy_score = c("explained_by_log_gdp_per_capita", "explained_by_gdp_per_capita", "gdp_per_capita", "economy_gdp_per_capita"),
  social_score = c("explained_by_social_support", "social_support", "family"),
  lifeexpectancy_score = c("explained_by_healthy_life_expectancy", "healthy_life_expectancy", "health_life_expectancy"),
  freedom_score = c("explained_by_freedom_to_make_life_choices", "freedom_to_make_life_choices", "freedom"),
  generosity_score = c("explained_by_generosity", "generosity"),
  corrperception_score = c("explained_by_perceptions_of_corruption", "perceptions_of_corruption", "trust_government_corruption"),
  residual_score = c("dystopia_residual", "dystopia_1_83_residual", "dystopia_residual")
)

# Function to clean and standardize columns
standardize_columns <- function(df) {
  df <- df %>% janitor::clean_names()

  for (std_name in names(column_mapping)) {
    matched_name <- column_mapping[[std_name]]
    current_names <- names(df)
    found <- intersect(matched_name %>% tolower(), current_names)
    if (length(found) > 0) {
      names(df)[which(names(df) == found[1])] <- std_name
    }
  }
  return(df)
}

# Function to extract year from filename
extract_year <- function(file_name) {
  year_match <- str_extract(file_name, "\\d{4}")  # Extracts 4-digit year
  return(as.integer(year_match))
}

# Function to read and process all CSV files
combine_csv_files <- function(folder_path) {
  file_list <- list.files(path = folder_path, pattern = "*.csv", full.names = TRUE)
  combined_data <- map(file_list, function(file) {
    df <- read_csv(file, col_types = cols(.default = "c")) %>%
      standardize_columns() %>%
      mutate(
        source_file = basename(file),
        year = extract_year(basename(file)) - 1
      ) %>%
      select(any_of(c("year", names(column_mapping))))
    return(df)
  }) %>%
    bind_rows()
  return(combined_data)
}

folder_path <- "data_files/yearly_data/"
raw_data <- combine_csv_files(folder_path)

# Preview
glimpse(raw_data)
```

## Cleaning of Data

First, the missing values for residual_score will be populated by calculating the residual.

```{r}
cleaned_data <- raw_data %>%
  mutate(across(any_of(c("ladder_score", "economy_score", "social_score", "lifeexpectancy_score", "freedom_score", "generosity_score", "corrperception_score", "residual_score")), as.numeric)) %>%
  mutate(residual_score = if_else(
    is.na(residual_score), 
    ladder_score - economy_score - social_score - 
    lifeexpectancy_score - freedom_score - 
    generosity_score - corrperception_score, 
    residual_score
  ))
```

Next, the country's rank in the respective year will be re-populated based on the ladder_score.

```{r}
cleaned_data <- cleaned_data %>%
  group_by(year) %>%
  arrange(desc(ladder_score)) %>%
  mutate(rank = row_number()) %>%
  ungroup()
```

Before we map the countries to the regions, the countries name is also observed to have different naming conventions which needs to be fixed

```{r}
# Removal of special characters
cleaned_data <- cleaned_data %>%
  mutate(country = str_replace_all(country, "\\*", "") %>% str_trim())

# Country name matching
country_name_fixes <- c(
  "Czech Republic" = "Czechia",
  "Congo (Brazzaville)" = "Congo",
  "Congo (Kinshasa)" = "Congo, Democratic Republic of the",
  "Congo" = "Congo, Democratic Republic of the",
  "State of Palestine" = "Palestine, State of",
  "Palestinian Territories" = "Palestine, State of",
  "Hong Kong S.A.R. of China" = "Hong Kong",
  "Hong Kong S.A.R., China" = "Hong Kong",
  "South Korea" = "Korea, Democratic People's Republic of",
  "Macedonia" = "North Macedonia",
  "Russia" = "Russian Federation",
  "Eswatini, Kingdom of" = "Eswatini",
  "Netherlands" = "Netherlands, Kingdom of the",
  "United Kingdom" = "United Kingdom of Great Britain and Northern Ireland",
  "United States" = "United States of America",
  "Venezuela" = "Venezuela, Bolivarian Republic of",
  "Taiwan" = "Taiwan, Province of China",
  "Taiwan Province of China" = "Taiwan, Province of China",
  "Trinidad & Tobago" = "Trinidad and Tobago",
  "Vietnam" = "Viet Nam",
  "Moldova" = "Moldova, Republic of",
  "Bolivia" = "Bolivia, Plurinational State of",
  "Northern Cyprus" = "Cyprus",
  "North Cyprus" = "Cyprus",
  "Turkey" = "Türkiye",
  "Turkiye" = "Türkiye",
  "Ivory Coast" = "Côte d'Ivoire",
  "Laos" = "Lao People's Democratic Republic",
  "Iran" = "Iran, Islamic Republic of",
  "Swaziland" = "Eswatini",
  "Tanzania" = "Tanzania, United Republic of",
  "Syria" = "Syrian Arab Republic"
)

# Apply mapping
cleaned_data <- cleaned_data %>%
  mutate(country_recode = recode(country, !!!country_name_fixes))
```

Country-region mapping will be also be implemented for future geographical analysis. The mapping will be obtained from a github url.

```{r}
url <- "https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv"

# Read the CSV file into a DataFrame
country_region_mapping <- read_csv(url)

# Map the cleaned country names to its region
cleaned_data <- cleaned_data %>%
  left_join(country_region_mapping %>% select(name, region), by = c("country_recode" = "name")) %>%
  mutate(region = if_else(is.na(region), "Unknown", region))
```

The country column is then recoded with the country_recoded column with Cyprus mapped back to either Northern Cyrpus and North Cyprus in the years 2014-2021 accordingly with the country being combined to Cyprus in 2022-2023 as per the original dataset.

```{r}
cyprus_variant <- cleaned_data %>%
  filter(country %in% c("North Cyprus", "Northern Cyprus")) %>%
  distinct(year, country) %>%
  mutate(
    flipped_variant = case_when(
      country == "North Cyprus" ~ "Northern Cyprus",
      country == "Northern Cyprus" ~ "North Cyprus"
    )
  )%>%
  select (year, flipped_variant)

cleaned_data <- cleaned_data %>%
  left_join(cyprus_variant, by = "year") %>%
  mutate(
    country = if_else(country == "Cyprus" & !is.na(flipped_variant),
                      flipped_variant,
                      country)
  ) %>%
  select(-flipped_variant)

cleaned_data <- cleaned_data %>%
  mutate(country = if_else(
    country %in% c("Cyprus", "Northern Cyprus", "North Cyprus"),
    country,
    country_recode
  )) %>%
  select(-country_recode)
```

After all the preliminary cleaning of dataset is performed, a summary of the cleaned_data is shown below.

```{r}
summary(cleaned_data)
```

There are missing numerical evaluation scores in the dataset as shown below.

```{r}
missing_summary <- cleaned_data %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(everything(), names_to = "column", values_to = "missing_count") %>%
  arrange(desc(missing_count))

print(missing_summary)
```

For each country with missing values in a given year, the missing scores are filled using the mean from the past 3 years for the same country and same column while the residual score is populated as the residual of the ladder score after deducting all the explanatory scores.

```{r}
columns_to_impute <- c("generosity_score", "freedom_score", "social_score", "economy_score", "corrperception_score", "lifeexpectancy_score")

cleaned_data <- cleaned_data %>%
  arrange(country, year) %>%
  group_by(country) %>%
  mutate(across(
    all_of(columns_to_impute), 
          ~ if_else(is.na(.),
                    slide_dbl(.x, mean, .before = 3, .complete = TRUE, na.rm = TRUE),
                    .)
  )) %>%
  ungroup() %>%
  mutate(residual_score = if_else(
    is.na(residual_score), 
    ladder_score - economy_score - social_score - 
    lifeexpectancy_score - freedom_score - 
    generosity_score - corrperception_score, 
    residual_score
  ))
```

There is a need to check if there are any countries with more than 10 rows of data given that the number of yearly data obtained is 10.

```{r}
cleaned_data %>%
  count(country) %>%
  filter(n > 10)
```

Each country should only have one row of data per year as confirmed below.

```{r}
cleaned_data %>%
  group_by(country, year) %>%
  filter(n() > 1)
```

The column types are also enforced as below.

```{r}
cleaned_data <- cleaned_data %>%
  mutate(
    year = as.integer(year),
    rank = as.integer(rank),
    country = as.character(country),
    region = as.factor(region)
    ) %>%
  mutate(
    across(c(ladder_score, economy_score, social_score, lifeexpectancy_score, freedom_score, generosity_score, corrperception_score, residual_score),
                ~ round(., 5)))
```

The cleaned dataset is as shown below.

```{r}
DT::datatable(cleaned_data, 
          options = list(pageLength = 10, scrollX = TRUE), 
          class = 'cell-border stripe hover',
          rownames = FALSE)
```

```{r, eval=FALSE, echo=TRUE, message=FALSE, warning=FALSE}
write_csv(cleaned_data, "data_files/world_happiness.csv")
```



